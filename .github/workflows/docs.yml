name: Deploy Documentation to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-docs:
    runs-on: ubuntu-latest
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0
      
      - name: Install `python` ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Print `python` Version
        id: full-python-version
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install and Configure Poetry
        uses: snok/install-poetry@v1.3.1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Print `poetry` Version
        run: poetry --version

      - name: Setup `python` Cache
        uses: actions/cache@v3
        id: python-cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Verify `python` Cache is Healthy
        if: steps.python-cache.outputs.cache-hit == 'true'
        run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv
          
      - name: Install Dependencies
        if: steps.python-cache.outputs.cache-hit != 'true'
        run: |
          poetry run pip install --upgrade pip
          poetry install --no-root
          poetry run python -m pip install tox-gh-actions
          poetry run python -m pip install pytest-github-actions-annotate-failures
      
      - name: Build Docs
        uses: ammaraskar/sphinx-action@master
        with:
          build-command: "sphinx-build -b html source build"
          docs-folder: "docs/"
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        env:
          personal_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          publish_branch: gh-pages
          publish_dir: docs/build/html/
